# 마이그레이션 파일 생성
$ python manage.py makemigrations <app-name>
# 마이그레이션 적용
$ python manage.py migrate <app-name>
# 마이그레이션 적용 현황
$ python manage.py showmigrations <app-name>
# 지정 마이그레이션의 SQL 내역
 python manage.py sqlmigrate <app-name> <migration-name>

# mysql 한글설정 명령어

show variables like 'c%';

set character_set_client = euckr;
set character_set_connection = euckr;
set character_set_results = euckr;


데이터 붓기###########################################################################################

delete from app_data_conversion_datadumpo;
delete from app_account_management_studentinfo;
delete from app_account_management_userinfo;
commit;


LOAD DATA LOCAL INFILE "C:\\subject-dumpdata.csv" INTO TABLE campy.app_data_conversion_datadumpo FIELDS TERMINATED BY ",";
LOAD DATA LOCAL INFILE "C:\\student-dumpdata.csv" INTO TABLE campy.app_account_management_studentinfo FIELDS TERMINATED BY ",";
LOAD DATA LOCAL INFILE "C:\\user-dumpdata.csv" INTO TABLE campy.app_account_management_userinfo FIELDS TERMINATED BY ",";

##########################################################################################################

# github 설정하기
# 1. 깃 생성
> git init
# 2. 원격 저장소 연결
> git remote add origin <저장소:url>
# 3. 깃 예외파일 생성
> .gitignore

# git 사용하기
# 1. 로컬 저장
> git add 수정된파일
# 2. 저장된 파일 커밋
> git commit -m "commit 제목  "
# 3. 커밋된 내용 원격저장소 동기화
> git push origin master(branch)
# 4. 원격저장소에서 가져오기
> git pull origin master(branch)
# 5. 원격저장소에서 로컬로 덮어쒸우기
> git stash

#git commit 명명규칙
#기능 완성
Implemented -기능이름
#기능 수정
Modified -기능이름 -변경사항
#완성된 기능에 약간 추가
Added -기능이름 -추가사항
#오류 수정
Fixed -기능이름 -오류내용
#기능 삭제
Deleted -기능이름 -삭제이유
#기능 아닌 내용 커밋
Revised -내용